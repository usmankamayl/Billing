{"version":3,"sources":["webpack://js-personal-project/./src/scripts/constants.js","webpack://js-personal-project/./src/scripts/services.js","webpack://js-personal-project/./src/scripts/meters.js","webpack://js-personal-project/./src/scripts/paymentsToPay.js","webpack://js-personal-project/./src/scripts/payments.js","webpack://js-personal-project/./src/scripts/totalAmount.js","webpack://js-personal-project/./src/scripts/payment.js","webpack://js-personal-project/./src/scripts/clearPayments.js","webpack://js-personal-project/./src/scripts/transactions.js","webpack://js-personal-project/./src/scripts/index.js"],"names":["tarifs","Object","freeze","taxes","water","internet","security","exchange","companies","document","querySelectorAll","paymentTitle","querySelector","paymentDesc","meter","getElementById","dataPrevious","dataCurrent","formList","innerHTML","payment","listItem","id","meterId","amount","insertAdjacentHTML","rightPaymentsFields","companyDescriptors","companyDescriptor","rightPayments","Array","from","index","findIndex","el","dataset","remove","textContent","payments","reduce","btnToSave","btnOutline","btnToPayPayments","transactionsItem","transactionsItemError","style","display","JSON","parse","localStorage","getItem","i","length","addPaymentToPay","writePayments","getTotalAmount","item","classList","add","forEach","addEventListener","p","choiceService","value","previous","alert","current","getOption","e","preventDefault","Math","floor","idx","listItems","splice","defineProperties","getOwnPropertyDescriptors","push","setItem","stringify","savePayment","clear","clearPayments","balance","checkedPaymentsId","checked","paymentsToPay","filter","indexOf","sumToPay","sum","payPayments"],"mappings":"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","file":"js/app.dadf9327.js","sourcesContent":["export const tarifs = Object.freeze({\n    taxes: 0.2,\n    water: 0.3,\n    internet: 0.4,\n    security: 0.5,\n    exchange: 0.6,\n});\n","import {tarifs} from \"./constants\";\r\n\r\nexport const companies = document.querySelectorAll('.left__company');\r\nexport const paymentTitle = document.querySelector('.center__title');\r\nexport const paymentDesc = document.querySelector('.center__desc');\r\n\r\nfunction choiceService(payment) {\r\n    for(let item of companies) {\r\n        item.classList.remove('selected');\r\n    }\r\n    companies[1].classList.add('selected');\r\n    payment.id = 'water';\r\n    companies.forEach(item => {\r\n        item.addEventListener('click', () => {\r\n            for(let item of companies) {\r\n                item.classList.remove('selected');\r\n            }\r\n\r\n            item.classList.add('selected');\r\n            payment.id = item.dataset.id;\r\n            const p = item.querySelector('p');\r\n            paymentTitle.textContent = p.textContent;\r\n\r\n            if (p.dataset.id === 'taxes') {\r\n                paymentDesc.textContent = 'Оплатите налоги по полной!';\r\n            }\r\n\r\n            if (p.dataset.id === 'water') {\r\n                paymentDesc.textContent = 'Оплата холодного водоснабжения';\r\n            }\r\n\r\n            if (p.dataset.id === 'internet') {\r\n                paymentDesc.textContent = 'Оплата интернета';\r\n            }\r\n\r\n            if (p.dataset.id === 'security') {\r\n                paymentDesc.textContent = 'Ну куда уж без охраны';\r\n            }\r\n\r\n            if (p.dataset.id === 'exchange') {\r\n                paymentDesc.textContent = 'Если есть валюта, то меняй ее смело';\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport default choiceService;\r\n","//2 task\r\nconst meter = document.getElementById('meters');\r\nconst dataPrevious = document.querySelector('#previous');\r\nconst dataCurrent = document.querySelector('#current');\r\n\r\n\r\nfunction getOption(payment) {\r\n    payment.meterId = meter.value;\r\n    meter.addEventListener('change', () => {\r\n        payment.meterId = meter.value;\r\n    });\r\n    dataPrevious.addEventListener('change', () => {\r\n        if(dataPrevious.value > 0) {\r\n            payment.previous = dataPrevious.value;\r\n        } else {\r\n            alert ('Заполните форму правильно');\r\n        }\r\n    });\r\n    dataCurrent.addEventListener('change', () => {\r\n        if(dataCurrent.value > 0 && dataCurrent.value > dataPrevious.value) {\r\n            payment.current = dataCurrent.value;\r\n        } else {\r\n            alert ('Заполните форму правильно');\r\n        }\r\n    });\r\n\r\n}\r\n\r\nexport default getOption;\r\n","const formList = document.querySelector('.form__summary-list');\r\nconst listItems = formList.querySelectorAll('.list__item:not(:last-child)');\r\n\r\nformList.innerHTML = ' <li class=\"list__item list__total\">\\n' +\r\n    '                <p><span class=\"list__item-label\">Всего</span>\\n' +\r\n    '                  <span class=\"price\">$ <b>0</b></span>\\n' +\r\n    '                </p>\\n' +\r\n    '              </li>';\r\n\r\n\r\nfunction addPaymentToPay(payment) {\r\n    const listItem = `<li class=\"list__item\" data-id=${payment.id}>\r\n         <p><span class=\"list__item-label\">${payment.meterId}</span>\r\n           <span class=\"price\">$ <b>${payment.amount}</b></span>\r\n         </p>\r\n       </li>`;\r\n\r\n    formList.insertAdjacentHTML('afterbegin', listItem);\r\n}\r\n\r\nexport default addPaymentToPay;\r\n\r\n\r\n\r\n","const rightPaymentsFields = document.querySelector('.right__payments-fields');\r\nconst companyDescriptors = document.getElementById('companies');\r\nrightPaymentsFields.innerHTML = '';\r\n\r\nfunction writePayments(payment) {\r\n    const companyDescriptor = companyDescriptors.querySelector(`[data-id=\"${payment.id}\"]`);\r\n    const rightPayments = Array.from(document.querySelectorAll('.right__payments-field'));\r\n    const index = rightPayments.findIndex(el => el.dataset.id === payment.id)\r\n   if (index !== -1) {\r\n       rightPayments[index].remove();\r\n       rightPaymentsFields.insertAdjacentHTML('afterbegin', `<p class=\"right__payments-field\" data-id=\"${payment.id}\">\r\n              <label>\r\n                <input type=\"checkbox\" />\r\n                <span>${companyDescriptor.textContent}</span>\r\n              </label>\r\n            </p>`);\r\n   } else {\r\n               rightPaymentsFields.insertAdjacentHTML('afterbegin', `<p class=\"right__payments-field\" data-id=\"${payment.id}\">\r\n              <label>\r\n                <input type=\"checkbox\" />\r\n                <span>${companyDescriptor.textContent}</span>\r\n              </label>\r\n            </p>`);\r\n   }\r\n\r\n}\r\n\r\nexport default writePayments;\r\n","function getTotalAmount(payment, payments) {\r\n    const totalAmount = document.querySelector('li.list__item.list__total b');\r\n    totalAmount.textContent = payments.reduce(function (amount, payment)  {\r\n        return   amount + payment.amount;\r\n    }, 0);\r\n}\r\n\r\nexport default getTotalAmount;\r\n","import { tarifs } from './constants';\r\nimport addPaymentToPay from \"./paymentsToPay\";\r\nimport writePayments from \"./payments\";\r\nimport getTotalAmount from \"./totalAmount\";\r\nconst btnToSave = document.querySelector('.form__footer  .btn');\r\nconst rightPaymentsFields = document.querySelector('.right__payments-fields');\r\n\r\nfunction savePayment(payment, payments) {\r\n    const listTotal = document.querySelector('.list__total');\r\n    const price = listTotal.querySelector('b');\r\n\r\n    btnToSave.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        let amount = Math.floor((payment.current - payment.previous) * tarifs[payment.id] * 1000 / 1000);\r\n        payment.amount = amount;\r\n        const idx = payments.findIndex(el => el.id === payment.id);\r\n        if (idx !== -1) {\r\n            const listItems = Array.from(document.querySelectorAll('.list__item:not(:last-child)'));\r\n            payments.splice(idx, 1, Object.defineProperties({}, Object.getOwnPropertyDescriptors(payment)));\r\n            listItems.forEach(item => {\r\n                if (item.dataset.id === payment.id) {\r\n                    item.remove();\r\n                    addPaymentToPay(payment);\r\n                    writePayments(payment);\r\n                }\r\n\r\n            })\r\n        } else {\r\n            payments.push(Object.defineProperties({}, Object.getOwnPropertyDescriptors(payment)));\r\n            addPaymentToPay(payment);\r\n            writePayments(payment);\r\n        }\r\n\r\n        document.querySelector('#previous').value = '';\r\n        document.querySelector('#current').value = '';\r\n        getTotalAmount(payment, payments);\r\n        localStorage.setItem('payments', JSON.stringify(payments));\r\n\r\n    })\r\n}\r\nexport default savePayment;\r\n","const formList = document.querySelector('.form__summary-list');\r\nconst btnOutline = document.querySelector('.btn-outline');\r\n\r\n\r\nfunction clearPayments(payments) {\r\n    btnOutline.addEventListener('click', () => {\r\n        document.querySelector('.right__payments-fields').innerHTML = '';\r\n        payments.length = 0;\r\n        formList.innerHTML = ' <li class=\"list__item list__total\">\\n' +\r\n            '                <p><span class=\"list__item-label\">Всего</span>\\n' +\r\n            '                  <span class=\"price\">$ <b>0</b></span>\\n' +\r\n            '                </p>\\n' +\r\n            '              </li>'\r\n\r\n        localStorage.clear();\r\n    })\r\n}\r\n\r\nexport default clearPayments;\r\n","import getTotalAmount from \"./totalAmount\";\r\nconst btnToPayPayments = document.querySelector('.right__payments-footer .btn');\r\nexport const transactionsItem = document.querySelector('.transactions__list .list__item');\r\nexport const transactionsItemError = document.querySelector('.transactions__list .list__item-error');\r\ntransactionsItem.style.display = 'none';\r\ntransactionsItemError.style.display = 'none';\r\nfunction payPayments(balance, payments) {\r\n    btnToPayPayments.addEventListener('click', (e) => {\r\n        e.preventDefault();\r\n        transactionsItem.style.display = 'none';\r\n        transactionsItemError.style.display = 'none';\r\n        const rightPayments = Array.from(document.querySelectorAll('.right__payments-field'));\r\n        const listItems = Array.from(document.querySelectorAll('.form__summary-list .list__item:not(:last-child)'));\r\n        const checkedPaymentsId = [];\r\n\r\n        rightPayments.forEach(el => {\r\n            if (el.querySelector('input').checked) {\r\n                checkedPaymentsId.push(el.dataset.id);\r\n            }\r\n        });\r\n\r\n\r\n        const paymentsToPay = payments.filter(el => checkedPaymentsId.indexOf(el.id) > -1);\r\n\r\n        const sumToPay = paymentsToPay.reduce(function (sum, current)  {\r\n            return   sum + current.amount;\r\n        }, 0);\r\n\r\n        if (balance - sumToPay > 0) {\r\n            transactionsItem.style.display = 'block';\r\n            rightPayments.forEach(el => {\r\n                if (el.querySelector('input').checked) {\r\n                    const index = payments.findIndex(payment => payment.id === el.dataset.id);\r\n                    payments.splice(index, 1);\r\n                    el.remove();\r\n                    getTotalAmount(payments[index], payments);\r\n                    localStorage.clear();\r\n                    localStorage.setItem('payments', JSON.stringify(payments));\r\n                }\r\n            });\r\n\r\n            listItems.forEach(el => {\r\n                paymentsToPay.forEach(item => {\r\n                    if (el.dataset.id === item.id) {\r\n                        el.remove();\r\n                    }\r\n                })\r\n            })\r\n\r\n        } else {\r\n            transactionsItemError.style.display = 'block';\r\n        }\r\n\r\n    })\r\n\r\n\r\n}\r\n\r\nexport default payPayments;\r\n","import '../styles/index.scss';\nimport { tarifs } from './constants';\nimport choiceService from './services';\nimport getOption from './meters';\nimport savePayment from './payment';\nimport clearPayments from './clearPayments';\nimport payPayments from \"./transactions\";\nimport addPaymentToPay from \"./paymentsToPay\";\nimport writePayments from \"./payments\";\nimport getTotalAmount from \"./totalAmount\";\n\n\n\nlet balance = 100;\nconst payment = {};\nlet payments =JSON.parse(localStorage.getItem('payments')) || [];\n    for (let i = 0; i < payments.length; i++) {\n        const payment = payments[i];\n        addPaymentToPay(payment);\n        writePayments(payment);\n    }\n    getTotalAmount(payment, payments);\n\nchoiceService(payment);\ngetOption(payment);\nsavePayment(payment, payments);\nclearPayments(payments);\npayPayments(balance, payments);\n\n\n\n"],"sourceRoot":""}